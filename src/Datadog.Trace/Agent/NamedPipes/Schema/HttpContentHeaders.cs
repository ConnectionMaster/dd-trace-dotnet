//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Datadog.Trace.Agent.NamedPipes
{
    internal sealed class HttpContentHeaders : HttpHeaders
    {
        private readonly HttpContent _parent;
        private bool _contentLengthSet;
        private HttpHeaderValueCollection<string> _allow;
        private HttpHeaderValueCollection<string> _contentEncoding;
        private HttpHeaderValueCollection<string> _contentLanguage;

        /// <summary>Gets the value of the <see langword="Allow" /> content header on an HTTP response. </summary>
        /// <returns>The value of the <see langword="Allow" /> header on an HTTP response.</returns>
        public ICollection<string> Allow
        {
            get
            {
                if (this._allow == null)
                    this._allow = new HttpHeaderValueCollection<string>(KnownHeaders.Allow.Descriptor, (HttpHeaders)this, HeaderUtilities.TokenValidator);
                return (ICollection<string>)this._allow;
            }
        }

        /// <summary>Gets the value of the <see langword="Content-Disposition" /> content header on an HTTP response.</summary>
        /// <returns>The value of the <see langword="Content-Disposition" /> content header on an HTTP response.</returns>
        public ContentDispositionHeaderValue ContentDisposition
        {
            get
            {
                return (ContentDispositionHeaderValue)this.GetParsedValues(KnownHeaders.ContentDisposition.Descriptor);
            }
            set
            {
                this.SetOrRemoveParsedValue(KnownHeaders.ContentDisposition.Descriptor, (object)value);
            }
        }

        /// <summary>Gets the value of the <see langword="Content-Encoding" /> content header on an HTTP response.</summary>
        /// <returns>The value of the <see langword="Content-Encoding" /> content header on an HTTP response.</returns>
        public ICollection<string> ContentEncoding
        {
            get
            {
                if (this._contentEncoding == null)
                    this._contentEncoding = new HttpHeaderValueCollection<string>(KnownHeaders.ContentEncoding.Descriptor, (HttpHeaders)this, HeaderUtilities.TokenValidator);
                return (ICollection<string>)this._contentEncoding;
            }
        }

        /// <summary>Gets the value of the <see langword="Content-Language" /> content header on an HTTP response.</summary>
        /// <returns>The value of the <see langword="Content-Language" /> content header on an HTTP response.</returns>
        public ICollection<string> ContentLanguage
        {
            get
            {
                if (this._contentLanguage == null)
                    this._contentLanguage = new HttpHeaderValueCollection<string>(KnownHeaders.ContentLanguage.Descriptor, (HttpHeaders)this, HeaderUtilities.TokenValidator);
                return (ICollection<string>)this._contentLanguage;
            }
        }

        /// <summary>Gets or sets the value of the <see langword="Content-Length" /> content header on an HTTP response.</summary>
        /// <returns>The value of the <see langword="Content-Length" /> content header on an HTTP response.</returns>
        public long? ContentLength
        {
            get
            {
                object parsedValues = this.GetParsedValues(KnownHeaders.ContentLength.Descriptor);
                if (!this._contentLengthSet && parsedValues == null)
                {
                    long? computedOrBufferLength = this._parent.GetComputedOrBufferLength();
                    if (computedOrBufferLength.HasValue)
                        this.SetParsedValue(KnownHeaders.ContentLength.Descriptor, (object)computedOrBufferLength.Value);
                    return computedOrBufferLength;
                }
                if (parsedValues == null)
                    return new long?();
                return new long?((long)parsedValues);
            }
            set
            {
                this.SetOrRemoveParsedValue(KnownHeaders.ContentLength.Descriptor, (object)value);
                this._contentLengthSet = true;
            }
        }

        /// <summary>Gets or sets the value of the <see langword="Content-Location" /> content header on an HTTP response.</summary>
        /// <returns>The value of the <see langword="Content-Location" /> content header on an HTTP response.</returns>
        public Uri ContentLocation
        {
            get
            {
                return (Uri)this.GetParsedValues(KnownHeaders.ContentLocation.Descriptor);
            }
            set
            {
                this.SetOrRemoveParsedValue(KnownHeaders.ContentLocation.Descriptor, (object)value);
            }
        }

        /// <summary>Gets or sets the value of the <see langword="Content-MD5" /> content header on an HTTP response.</summary>
        /// <returns>The value of the <see langword="Content-MD5" /> content header on an HTTP response.</returns>
        public byte[] ContentMD5
        {
            get
            {
                return (byte[])this.GetParsedValues(KnownHeaders.ContentMD5.Descriptor);
            }
            set
            {
                this.SetOrRemoveParsedValue(KnownHeaders.ContentMD5.Descriptor, (object)value);
            }
        }

        /// <summary>Gets or sets the value of the <see langword="Content-Range" /> content header on an HTTP response.</summary>
        /// <returns>The value of the <see langword="Content-Range" /> content header on an HTTP response.</returns>
        public ContentRangeHeaderValue ContentRange
        {
            get
            {
                return (ContentRangeHeaderValue)this.GetParsedValues(KnownHeaders.ContentRange.Descriptor);
            }
            set
            {
                this.SetOrRemoveParsedValue(KnownHeaders.ContentRange.Descriptor, (object)value);
            }
        }

        /// <summary>Gets or sets the value of the <see langword="Content-Type" /> content header on an HTTP response.</summary>
        /// <returns>The value of the <see langword="Content-Type" /> content header on an HTTP response.</returns>
        public MediaTypeHeaderValue ContentType
        {
            get
            {
                return (MediaTypeHeaderValue)this.GetParsedValues(KnownHeaders.ContentType.Descriptor);
            }
            set
            {
                this.SetOrRemoveParsedValue(KnownHeaders.ContentType.Descriptor, (object)value);
            }
        }

        /// <summary>Gets or sets the value of the <see langword="Expires" /> content header on an HTTP response.</summary>
        /// <returns>The value of the <see langword="Expires" /> content header on an HTTP response.</returns>
        public DateTimeOffset? Expires
        {
            get
            {
                return HeaderUtilities.GetDateTimeOffsetValue(KnownHeaders.Expires.Descriptor, (HttpHeaders)this, new DateTimeOffset?(DateTimeOffset.MinValue));
            }
            set
            {
                this.SetOrRemoveParsedValue(KnownHeaders.Expires.Descriptor, (object)value);
            }
        }

        /// <summary>Gets or sets the value of the <see langword="Last-Modified" /> content header on an HTTP response.</summary>
        /// <returns>The value of the <see langword="Last-Modified" /> content header on an HTTP response.</returns>
        public DateTimeOffset? LastModified
        {
            get
            {
                return HeaderUtilities.GetDateTimeOffsetValue(KnownHeaders.LastModified.Descriptor, (HttpHeaders)this, new DateTimeOffset?());
            }
            set
            {
                this.SetOrRemoveParsedValue(KnownHeaders.LastModified.Descriptor, (object)value);
            }
        }

        internal HttpContentHeaders(HttpContent parent)
            : base(HttpHeaderType.Content | HttpHeaderType.Custom, HttpHeaderType.None)
        {
            this._parent = parent;
        }
    }
}
