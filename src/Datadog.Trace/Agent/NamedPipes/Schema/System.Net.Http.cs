//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------

using System;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using Headers;

namespace Datadog.Trace.Agent.NamedPipes
{
    internal partial class ByteArrayContent : HttpContent
    {
        public ByteArrayContent(byte[] content) { }
        public ByteArrayContent(byte[] content, int offset, int count) { }
        protected override System.IO.Stream CreateContentReadStream(System.Threading.CancellationToken cancellationToken) { throw null; }
        protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync() { throw null; }
        protected override void SerializeToStream(System.IO.Stream stream, TransportContext context, System.Threading.CancellationToken cancellationToken) { }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext context) { throw null; }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext context, System.Threading.CancellationToken cancellationToken) { throw null; }
        protected internal override bool TryComputeLength(out long length) { throw null; }
    }
    internal enum ClientCertificateOption
    {
        Manual = 0,
        Automatic = 1,
    }
    internal abstract partial class DelegatingHandler : HttpMessageHandler
    {
        protected DelegatingHandler() { }
        protected DelegatingHandler(HttpMessageHandler innerHandler) { }
        
        public HttpMessageHandler InnerHandler { get { throw null; } set { } }
        protected override void Dispose(bool disposing) { }
        protected internal override HttpResponseMessage Send(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
        protected internal override System.Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
    }
    internal partial class FormUrlEncodedContent : ByteArrayContent
    {
        public FormUrlEncodedContent(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> nameValueCollection) : base(default(byte[])) { }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { throw null; }
    }
    internal delegate System.Text.Encoding HeaderEncodingSelector<TContext>(string headerName, TContext context);
    internal partial class HttpClient : HttpMessageInvoker
    {
        public HttpClient() : base(default(HttpMessageHandler)) { }
        public HttpClient(HttpMessageHandler handler) : base(default(HttpMessageHandler)) { }
        public HttpClient(HttpMessageHandler handler, bool disposeHandler) : base(default(HttpMessageHandler)) { }
        public System.Uri BaseAddress { get { throw null; } set { } }
        public static IWebProxy DefaultProxy { get { throw null; } set { } }
        public Headers.HttpRequestHeaders DefaultRequestHeaders { get { throw null; } }
        public System.Version DefaultRequestVersion { get { throw null; } set { } }
        public HttpVersionPolicy DefaultVersionPolicy { get { throw null; } set { } }
        public long MaxResponseContentBufferSize { get { throw null; } set { } }
        public System.TimeSpan Timeout { get { throw null; } set { } }
        public void CancelPendingRequests() { }
        public System.Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(string requestUri) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(string requestUri, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(System.Uri requestUri) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(System.Uri requestUri, System.Threading.CancellationToken cancellationToken) { throw null; }
        protected override void Dispose(bool disposing) { }
        public System.Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> GetAsync(System.Uri requestUri) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> GetAsync(System.Uri requestUri, HttpCompletionOption completionOption) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> GetAsync(System.Uri requestUri, HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> GetAsync(System.Uri requestUri, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync(string requestUri) { throw null; }
        public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync(string requestUri, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync(System.Uri requestUri) { throw null; }
        public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync(System.Uri requestUri, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(string requestUri) { throw null; }
        public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(string requestUri, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(System.Uri requestUri) { throw null; }
        public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(System.Uri requestUri, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<string> GetStringAsync(string requestUri) { throw null; }
        public System.Threading.Tasks.Task<string> GetStringAsync(string requestUri, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<string> GetStringAsync(System.Uri requestUri) { throw null; }
        public System.Threading.Tasks.Task<string> GetStringAsync(System.Uri requestUri, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PatchAsync(string requestUri, HttpContent content) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PatchAsync(string requestUri, HttpContent content, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PatchAsync(System.Uri requestUri, HttpContent content) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PatchAsync(System.Uri requestUri, HttpContent content, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PostAsync(System.Uri requestUri, HttpContent content) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PostAsync(System.Uri requestUri, HttpContent content, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PutAsync(System.Uri requestUri, HttpContent content) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> PutAsync(System.Uri requestUri, HttpContent content, System.Threading.CancellationToken cancellationToken) { throw null; }
        public HttpResponseMessage Send(HttpRequestMessage request) { throw null; }
        public HttpResponseMessage Send(HttpRequestMessage request, HttpCompletionOption completionOption) { throw null; }
        public HttpResponseMessage Send(HttpRequestMessage request, HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken) { throw null; }
        public override HttpResponseMessage Send(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption) { throw null; }
        public System.Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken) { throw null; }
        public override System.Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
    }
    internal partial class HttpClientHandler : HttpMessageHandler
    {
        public HttpClientHandler() { }
        public bool AllowAutoRedirect { get { throw null; } set { } }

        public DecompressionMethods AutomaticDecompression { get { throw null; } set { } }

        public bool CheckCertificateRevocationList { get { throw null; } set { } }
        public ClientCertificateOption ClientCertificateOptions { get { throw null; } set { } }

        public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get { throw null; } }

        public CookieContainer CookieContainer { get { throw null; } set { } }

        public ICredentials Credentials { get { throw null; } set { } }
        public static System.Func<HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, Security.SslPolicyErrors, bool> DangerousAcceptAnyServerCertificateValidator { get { throw null; } }

        public ICredentials DefaultProxyCredentials { get { throw null; } set { } }

        public int MaxAutomaticRedirections { get { throw null; } set { } }

        public int MaxConnectionsPerServer { get { throw null; } set { } }
        public long MaxRequestContentBufferSize { get { throw null; } set { } }

        public int MaxResponseHeadersLength { get { throw null; } set { } }

        public bool PreAuthenticate { get { throw null; } set { } }
        public System.Collections.Generic.IDictionary<string, object> Properties { get { throw null; } }

        public IWebProxy? Proxy { get { throw null; } set { } }

        public System.Func<HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2?, System.Security.Cryptography.X509Certificates.X509Chain?, Security.SslPolicyErrors, bool>? ServerCertificateCustomValidationCallback { get { throw null; } set { } }

        public System.Security.Authentication.SslProtocols SslProtocols { get { throw null; } set { } }
        public virtual bool SupportsAutomaticDecompression { get { throw null; } }
        public virtual bool SupportsProxy { get { throw null; } }
        public virtual bool SupportsRedirectConfiguration { get { throw null; } }

        public bool UseCookies { get { throw null; } set { } }

        public bool UseDefaultCredentials { get { throw null; } set { } }

        public bool UseProxy { get { throw null; } set { } }
        protected override void Dispose(bool disposing) { }

        protected internal override HttpResponseMessage Send(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
        protected internal override System.Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
    }
    internal enum HttpCompletionOption
    {
        ResponseContentRead = 0,
        ResponseHeadersRead = 1,
    }
    // internal abstract partial class HttpContent : System.IDisposable
    // {
    //     protected HttpContent() { }
    //     public Headers.HttpContentHeaders Headers { get { throw null; } }
    //     public void CopyTo(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { }
    //     public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream) { throw null; }
    //     public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream, TransportContext? context) { throw null; }
    //     public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { throw null; }
    //     public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { throw null; }
    //     protected virtual System.IO.Stream CreateContentReadStream(System.Threading.CancellationToken cancellationToken) { throw null; }
    //     protected virtual System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync() { throw null; }
    //     protected virtual System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync(System.Threading.CancellationToken cancellationToken) { throw null; }
    //     public void Dispose() { }
    //     protected virtual void Dispose(bool disposing) { }
    //     public System.Threading.Tasks.Task LoadIntoBufferAsync() { throw null; }
    //     public System.Threading.Tasks.Task LoadIntoBufferAsync(long maxBufferSize) { throw null; }
    //     public System.Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync() { throw null; }
    //     public System.Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync(System.Threading.CancellationToken cancellationToken) { throw null; }
    //     public System.IO.Stream ReadAsStream() { throw null; }
    //     public System.IO.Stream ReadAsStream(System.Threading.CancellationToken cancellationToken) { throw null; }
    //     public System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync() { throw null; }
    //     public System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Threading.CancellationToken cancellationToken) { throw null; }
    //     public System.Threading.Tasks.Task<string> ReadAsStringAsync() { throw null; }
    //     public System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Threading.CancellationToken cancellationToken) { throw null; }
    //     protected virtual void SerializeToStream(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { }
    //     protected abstract System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext? context);
    //     protected virtual System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { throw null; }
    //     protected internal abstract bool TryComputeLength(out long length);
    // }
    internal abstract partial class HttpMessageHandler : System.IDisposable
    {
        protected HttpMessageHandler() { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        protected internal virtual HttpResponseMessage Send(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
        protected internal abstract System.Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    }
    internal partial class HttpMessageInvoker : System.IDisposable
    {
        public HttpMessageInvoker(HttpMessageHandler handler) { }
        public HttpMessageInvoker(HttpMessageHandler handler, bool disposeHandler) { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }

        public virtual HttpResponseMessage Send(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
        public virtual System.Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
    }
    internal partial class HttpMethod : System.IEquatable<HttpMethod>
    {
        public HttpMethod(string method) { }
        public static HttpMethod Delete { get { throw null; } }
        public static HttpMethod Get { get { throw null; } }
        public static HttpMethod Head { get { throw null; } }
        public string Method { get { throw null; } }
        public static HttpMethod Options { get { throw null; } }
        public static HttpMethod Patch { get { throw null; } }
        public static HttpMethod Post { get { throw null; } }
        public static HttpMethod Put { get { throw null; } }
        public static HttpMethod Trace { get { throw null; } }
        public bool Equals(HttpMethod other) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(HttpMethod left, HttpMethod right) { throw null; }
        public static bool operator !=(HttpMethod left, HttpMethod right) { throw null; }
        public override string ToString() { throw null; }
    }
    internal partial class HttpRequestException : System.Exception
    {
        public HttpRequestException() { }
        public HttpRequestException(string message) { }
        public HttpRequestException(string message, System.Exception? inner) { }
        public HttpRequestException(string message, System.Exception? inner, HttpStatusCode? statusCode) { }
        public HttpStatusCode? StatusCode { get { throw null; } }
    }
    internal partial class HttpRequestMessage : System.IDisposable
    {
        public HttpRequestMessage() { }
        public HttpRequestMessage(HttpMethod method, string requestUri) { }
        public HttpRequestMessage(HttpMethod method, System.Uri requestUri) { }
        public HttpContent Content { get { throw null; } set { } }
        public Headers.HttpRequestHeaders Headers { get { throw null; } }
        public HttpMethod Method { get { throw null; } set { } }
        [Obsolete("Use Options instead.")]
        public System.Collections.Generic.IDictionary<string, object> Properties { get { throw null; } }
        public HttpRequestOptions Options { get { throw null; } }
        public System.Uri RequestUri { get { throw null; } set { } }
        public System.Version Version { get { throw null; } set { } }
        public HttpVersionPolicy VersionPolicy { get { throw null; } set { } }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public override string ToString() { throw null; }
    }

    internal readonly struct HttpRequestOptionsKey<TValue>
    {
        public HttpRequestOptionsKey(string key) { }
        public string Key { get { throw null; } }
    }

    internal sealed class HttpRequestOptions : System.Collections.Generic.IDictionary<string, object>
    {
        void System.Collections.Generic.IDictionary<string, object>.Add(string key, object value) { throw null; }
        System.Collections.Generic.ICollection<string> System.Collections.Generic.IDictionary<string, object>.Keys { get { throw null; } }
        System.Collections.Generic.ICollection<object> System.Collections.Generic.IDictionary<string, object>.Values { get { throw null; } }
        bool System.Collections.Generic.IDictionary<string, object>.Remove(string key) { throw null; }
        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Remove(System.Collections.Generic.KeyValuePair<string, object> item) { throw null; }
        bool System.Collections.Generic.IDictionary<string, object>.TryGetValue(string key, out object value) { throw null; }
        object System.Collections.Generic.IDictionary<string, object>.this[string key] { get { throw null; } set { } }
        void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Add(System.Collections.Generic.KeyValuePair<string, object> item) { throw null; }
        void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Clear() { throw null; }
        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Contains(System.Collections.Generic.KeyValuePair<string, object> item) { throw null; }
        bool System.Collections.Generic.IDictionary<string, object>.ContainsKey(string key) { throw null; }
        void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.CopyTo(System.Collections.Generic.KeyValuePair<string, object>[] array, int arrayIndex) { throw null; }
        int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Count { get { throw null; } }
        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.IsReadOnly { get { throw null; } }
        System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>>.GetEnumerator() { throw null; }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        public bool TryGetValue<TValue>(HttpRequestOptionsKey<TValue> key, out TValue value) { throw null; }
        public void Set<TValue>(HttpRequestOptionsKey<TValue> key, TValue value) { throw null; }
    }

    internal partial class HttpResponseMessage : System.IDisposable
    {
        public HttpResponseMessage() { }
        public HttpResponseMessage(HttpStatusCode statusCode) { }

        public HttpContent Content { get { throw null; } set { } }
        public HttpResponseHeaders Headers { get { throw null; } }
        public bool IsSuccessStatusCode { get { throw null; } }
        public string ReasonPhrase { get { throw null; } set { } }
        public HttpRequestMessage RequestMessage { get { throw null; } set { } }
        public HttpStatusCode StatusCode { get { throw null; } set { } }
        public HttpResponseHeaders TrailingHeaders { get { throw null; } }
        public System.Version Version { get { throw null; } set { } }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public HttpResponseMessage EnsureSuccessStatusCode() { throw null; }
        public override string ToString() { throw null; }
    }
    internal enum HttpVersionPolicy
    {
        RequestVersionOrLower = 0,
        RequestVersionOrHigher = 1,
        RequestVersionExact = 2,
    }
    internal abstract partial class MessageProcessingHandler : DelegatingHandler
    {
        protected MessageProcessingHandler() { }
        protected MessageProcessingHandler(HttpMessageHandler innerHandler) { }
        protected abstract HttpRequestMessage ProcessRequest(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
        protected abstract HttpResponseMessage ProcessResponse(HttpResponseMessage response, System.Threading.CancellationToken cancellationToken);
        protected internal sealed override HttpResponseMessage Send(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
        protected internal sealed override System.Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
    }
    internal partial class MultipartContent : HttpContent, System.Collections.Generic.IEnumerable<HttpContent>, System.Collections.IEnumerable
    {
        public MultipartContent() { }
        public MultipartContent(string subtype) { }
        public MultipartContent(string subtype, string boundary) { }
        public HeaderEncodingSelector<HttpContent>? HeaderEncodingSelector { get { throw null; } set { } }
        public virtual void Add(HttpContent content) { }
        protected override System.IO.Stream CreateContentReadStream(System.Threading.CancellationToken cancellationToken) { throw null; }
        protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync() { throw null; }
        protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync(System.Threading.CancellationToken cancellationToken) { throw null; }
        protected override void Dispose(bool disposing) { }
        public System.Collections.Generic.IEnumerator<HttpContent> GetEnumerator() { throw null; }
        protected override void SerializeToStream(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext? context) { throw null; }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { throw null; }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        protected internal override bool TryComputeLength(out long length) { throw null; }
    }
    internal partial class MultipartFormDataContent : MultipartContent
    {
        public MultipartFormDataContent() { }
        public MultipartFormDataContent(string boundary) { }
        public override void Add(HttpContent content) { }
        public void Add(HttpContent content, string name) { }
        public void Add(HttpContent content, string name, string fileName) { }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { throw null; }
    }
    internal sealed partial class ReadOnlyMemoryContent : HttpContent
    {
        public ReadOnlyMemoryContent(System.ReadOnlyMemory<byte> content) { }
        protected override System.IO.Stream CreateContentReadStream(System.Threading.CancellationToken cancellationToken) { throw null; }
        protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync() { throw null; }
        protected override void SerializeToStream(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext? context) { throw null; }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { throw null; }
        protected internal override bool TryComputeLength(out long length) { throw null; }
    }

    internal sealed partial class SocketsHttpHandler : HttpMessageHandler
    {
        public SocketsHttpHandler() { }
        public static bool IsSupported { get { throw null; } }
        public bool AllowAutoRedirect { get { throw null; } set { } }
        public DecompressionMethods AutomaticDecompression { get { throw null; } set { } }
        public System.TimeSpan ConnectTimeout { get { throw null; } set { } }
        public CookieContainer CookieContainer { get { throw null; } set { } }
        public ICredentials Credentials { get { throw null; } set { } }
        public ICredentials DefaultProxyCredentials { get { throw null; } set { } }
        public System.TimeSpan Expect100ContinueTimeout { get { throw null; } set { } }
        public System.TimeSpan KeepAlivePingDelay { get { throw null; } set { } }
        public System.TimeSpan KeepAlivePingTimeout { get { throw null; } set { } }
        public HttpKeepAlivePingPolicy KeepAlivePingPolicy { get { throw null; } set { } }
        public int MaxAutomaticRedirections { get { throw null; } set { } }
        public int MaxConnectionsPerServer { get { throw null; } set { } }
        public int MaxResponseDrainSize { get { throw null; } set { } }
        public int MaxResponseHeadersLength { get { throw null; } set { } }
        public System.TimeSpan PooledConnectionIdleTimeout { get { throw null; } set { } }
        public System.TimeSpan PooledConnectionLifetime { get { throw null; } set { } }
        public bool PreAuthenticate { get { throw null; } set { } }
        public System.Collections.Generic.IDictionary<string, object> Properties { get { throw null; } }
        public IWebProxy? Proxy { get { throw null; } set { } }
        public HeaderEncodingSelector<HttpRequestMessage>? RequestHeaderEncodingSelector { get { throw null; } set { } }
        public System.TimeSpan ResponseDrainTimeout { get { throw null; } set { } }
        public HeaderEncodingSelector<HttpRequestMessage>? ResponseHeaderEncodingSelector { get { throw null; } set { } }

        public Security.SslClientAuthenticationOptions SslOptions { get { throw null; } set { } }
        public bool UseCookies { get { throw null; } set { } }
        public bool UseProxy { get { throw null; } set { } }
        protected override void Dispose(bool disposing) { }
        protected internal override HttpResponseMessage Send(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
        protected internal override System.Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { throw null; }
        public bool EnableMultipleHttp2Connections { get { throw null; } set { } }
        public Func<SocketsHttpConnectionContext, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<System.IO.Stream>>? ConnectCallback { get { throw null; } set { } }
        public Func<SocketsHttpPlaintextStreamFilterContext, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<System.IO.Stream>>? PlaintextStreamFilter { get { throw null; } set { } }
        public Quic.Implementations.QuicImplementationProvider? QuicImplementationProvider { get { throw null; } set { } }
    }
    internal sealed class SocketsHttpConnectionContext
    {
        internal SocketsHttpConnectionContext() { }
        public DnsEndPoint DnsEndPoint { get { throw null; } }
        public HttpRequestMessage InitialRequestMessage { get { throw null; } }
    }
    internal sealed class SocketsHttpPlaintextStreamFilterContext
    {
        internal SocketsHttpPlaintextStreamFilterContext() { }
        public System.IO.Stream PlaintextStream { get { throw null; } }
        public Version NegotiatedHttpVersion { get { throw null; } }
        public HttpRequestMessage InitialRequestMessage { get { throw null; } }
    }
    internal enum HttpKeepAlivePingPolicy
    {
        WithActiveRequests,
        Always
    }
    internal partial class StreamContent : HttpContent
    {
        public StreamContent(System.IO.Stream content) { }
        public StreamContent(System.IO.Stream content, int bufferSize) { }
        protected override System.IO.Stream CreateContentReadStream(System.Threading.CancellationToken cancellationToken) { throw null; }
        protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync() { throw null; }
        protected override void Dispose(bool disposing) { }
        protected override void SerializeToStream(System.IO.Stream stream, TransportContext? context, System.Threading.CancellationToken cancellationToken) { }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext? context) { throw null; }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext context, System.Threading.CancellationToken cancellationToken) { throw null; }
        protected internal override bool TryComputeLength(out long length) { throw null; }
    }
    internal partial class StringContent : ByteArrayContent
    {
        public StringContent(string content) : base(default(byte[])) { }
        public StringContent(string content, System.Text.Encoding encoding) : base(default(byte[])) { }
        public StringContent(string content, System.Text.Encoding encoding, string mediaType) : base(default(byte[])) { }
        protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, TransportContext context, System.Threading.CancellationToken cancellationToken) { throw null; }
    }
}
namespace Headers
{
    internal partial class AuthenticationHeaderValue : System.ICloneable
    {
        public AuthenticationHeaderValue(string scheme) { }
        public AuthenticationHeaderValue(string scheme, string parameter) { }
        public string Parameter { get { throw null; } }
        public string Scheme { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.AuthenticationHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.AuthenticationHeaderValue parsedValue) { throw null; }
    }
    internal partial class CacheControlHeaderValue : System.ICloneable
    {
        public CacheControlHeaderValue() { }
        public System.Collections.Generic.ICollection<Headers.NameValueHeaderValue> Extensions { get { throw null; } }
        public System.TimeSpan? MaxAge { get { throw null; } set { } }
        public bool MaxStale { get { throw null; } set { } }
        public System.TimeSpan? MaxStaleLimit { get { throw null; } set { } }
        public System.TimeSpan? MinFresh { get { throw null; } set { } }
        public bool MustRevalidate { get { throw null; } set { } }
        public bool NoCache { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<string> NoCacheHeaders { get { throw null; } }
        public bool NoStore { get { throw null; } set { } }
        public bool NoTransform { get { throw null; } set { } }
        public bool OnlyIfCached { get { throw null; } set { } }
        public bool Private { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<string> PrivateHeaders { get { throw null; } }
        public bool ProxyRevalidate { get { throw null; } set { } }
        public bool Public { get { throw null; } set { } }
        public System.TimeSpan? SharedMaxAge { get { throw null; } set { } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.CacheControlHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.CacheControlHeaderValue parsedValue) { throw null; }
    }
    internal partial class ContentDispositionHeaderValue : System.ICloneable
    {
        protected ContentDispositionHeaderValue(Headers.ContentDispositionHeaderValue source) { }
        public ContentDispositionHeaderValue(string dispositionType) { }
        public System.DateTimeOffset? CreationDate { get { throw null; } set { } }
        public string DispositionType { get { throw null; } set { } }
        public string FileName { get { throw null; } set { } }
        public string FileNameStar { get { throw null; } set { } }
        public System.DateTimeOffset? ModificationDate { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<Headers.NameValueHeaderValue> Parameters { get { throw null; } }
        public System.DateTimeOffset? ReadDate { get { throw null; } set { } }
        public long? Size { get { throw null; } set { } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.ContentDispositionHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.ContentDispositionHeaderValue parsedValue) { throw null; }
    }
    internal partial class ContentRangeHeaderValue : System.ICloneable
    {
        public ContentRangeHeaderValue(long length) { }
        public ContentRangeHeaderValue(long from, long to) { }
        public ContentRangeHeaderValue(long from, long to, long length) { }
        public long? From { get { throw null; } }
        public bool HasLength { get { throw null; } }
        public bool HasRange { get { throw null; } }
        public long? Length { get { throw null; } }
        public long? To { get { throw null; } }
        public string Unit { get { throw null; } set { } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.ContentRangeHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.ContentRangeHeaderValue? parsedValue) { throw null; }
    }
    internal partial class EntityTagHeaderValue : System.ICloneable
    {
        public EntityTagHeaderValue(string tag) { }
        public EntityTagHeaderValue(string tag, bool isWeak) { }
        public static Headers.EntityTagHeaderValue Any { get { throw null; } }
        public bool IsWeak { get { throw null; } }
        public string Tag { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.EntityTagHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.EntityTagHeaderValue parsedValue) { throw null; }
    }
    // public sealed partial class HttpContentHeaders : Headers.HttpHeaders
    // {
    //     internal HttpContentHeaders() { }
    //     public System.Collections.Generic.ICollection<string> Allow { get { throw null; } }
    //     public Headers.ContentDispositionHeaderValue ContentDisposition { get { throw null; } set { } }
    //     public System.Collections.Generic.ICollection<string> ContentEncoding { get { throw null; } }
    //     public System.Collections.Generic.ICollection<string> ContentLanguage { get { throw null; } }
    //     public long? ContentLength { get { throw null; } set { } }
    //     public System.Uri ContentLocation { get { throw null; } set { } }
    //     public byte[]? ContentMD5 { get { throw null; } set { } }
    //     public Headers.ContentRangeHeaderValue? ContentRange { get { throw null; } set { } }
    //     public Headers.MediaTypeHeaderValue? ContentType { get { throw null; } set { } }
    //     public System.DateTimeOffset? Expires { get { throw null; } set { } }
    //     public System.DateTimeOffset? LastModified { get { throw null; } set { } }
    // }
    // public abstract partial class HttpHeaders : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.IEnumerable
    // {
    //     protected HttpHeaders() { }
    //     public void Add(string name, System.Collections.Generic.IEnumerable<string> values) { }
    //     public void Add(string name, string value) { }
    //     public void Clear() { }
    //     public bool Contains(string name) { throw null; }
    //     public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>> GetEnumerator() { throw null; }
    //     public System.Collections.Generic.IEnumerable<string> GetValues(string name) { throw null; }
    //     public bool Remove(string name) { throw null; }
    //     System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    //     public override string ToString() { throw null; }
    //     public bool TryAddWithoutValidation(string name, System.Collections.Generic.IEnumerable<string> values) { throw null; }
    //     public bool TryAddWithoutValidation(string name, string value) { throw null; }
    //     public bool TryGetValues(string name, out System.Collections.Generic.IEnumerable<string>? values) { throw null; }
    // }
    // public sealed partial class HttpHeaderValueCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable where T : class
    // {
    //     internal HttpHeaderValueCollection() { }
    //     public int Count { get { throw null; } }
    //     public bool IsReadOnly { get { throw null; } }
    //     public void Add(T item) { }
    //     public void Clear() { }
    //     public bool Contains(T item) { throw null; }
    //     public void CopyTo(T[] array, int arrayIndex) { }
    //     public System.Collections.Generic.IEnumerator<T> GetEnumerator() { throw null; }
    //     public void ParseAdd(string input) { }
    //     public bool Remove(T item) { throw null; }
    //     System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    //     public override string ToString() { throw null; }
    //     public bool TryParseAdd(string input) { throw null; }
    // }
    // public sealed partial class HttpRequestHeaders : Headers.HttpHeaders
    // {
    //     internal HttpRequestHeaders() { }
    //     public Headers.HttpHeaderValueCollection<Headers.MediaTypeWithQualityHeaderValue> Accept { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.StringWithQualityHeaderValue> AcceptCharset { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.StringWithQualityHeaderValue> AcceptEncoding { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.StringWithQualityHeaderValue> AcceptLanguage { get { throw null; } }
    //     public Headers.AuthenticationHeaderValue? Authorization { get { throw null; } set { } }
    //     public Headers.CacheControlHeaderValue? CacheControl { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<string> Connection { get { throw null; } }
    //     public bool? ConnectionClose { get { throw null; } set { } }
    //     public System.DateTimeOffset? Date { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<Headers.NameValueWithParametersHeaderValue> Expect { get { throw null; } }
    //     public bool? ExpectContinue { get { throw null; } set { } }
    //     public string From { get { throw null; } set { } }
    //     public string Host { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<Headers.EntityTagHeaderValue> IfMatch { get { throw null; } }
    //     public System.DateTimeOffset? IfModifiedSince { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<Headers.EntityTagHeaderValue> IfNoneMatch { get { throw null; } }
    //     public Headers.RangeConditionHeaderValue? IfRange { get { throw null; } set { } }
    //     public System.DateTimeOffset? IfUnmodifiedSince { get { throw null; } set { } }
    //     public int? MaxForwards { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<Headers.NameValueHeaderValue> Pragma { get { throw null; } }
    //     public Headers.AuthenticationHeaderValue? ProxyAuthorization { get { throw null; } set { } }
    //     public Headers.RangeHeaderValue? Range { get { throw null; } set { } }
    //     public System.Uri Referrer { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<Headers.TransferCodingWithQualityHeaderValue> TE { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<string> Trailer { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.TransferCodingHeaderValue> TransferEncoding { get { throw null; } }
    //     public bool? TransferEncodingChunked { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<Headers.ProductHeaderValue> Upgrade { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.ProductInfoHeaderValue> UserAgent { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.ViaHeaderValue> Via { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.WarningHeaderValue> Warning { get { throw null; } }
    // }
    // public sealed partial class HttpResponseHeaders : Headers.HttpHeaders
    // {
    //     internal HttpResponseHeaders() { }
    //     public Headers.HttpHeaderValueCollection<string> AcceptRanges { get { throw null; } }
    //     public System.TimeSpan? Age { get { throw null; } set { } }
    //     public Headers.CacheControlHeaderValue? CacheControl { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<string> Connection { get { throw null; } }
    //     public bool? ConnectionClose { get { throw null; } set { } }
    //     public System.DateTimeOffset? Date { get { throw null; } set { } }
    //     public Headers.EntityTagHeaderValue? ETag { get { throw null; } set { } }
    //     public System.Uri Location { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<Headers.NameValueHeaderValue> Pragma { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.AuthenticationHeaderValue> ProxyAuthenticate { get { throw null; } }
    //     public Headers.RetryConditionHeaderValue? RetryAfter { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<Headers.ProductInfoHeaderValue> Server { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<string> Trailer { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.TransferCodingHeaderValue> TransferEncoding { get { throw null; } }
    //     public bool? TransferEncodingChunked { get { throw null; } set { } }
    //     public Headers.HttpHeaderValueCollection<Headers.ProductHeaderValue> Upgrade { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<string> Vary { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.ViaHeaderValue> Via { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.WarningHeaderValue> Warning { get { throw null; } }
    //     public Headers.HttpHeaderValueCollection<Headers.AuthenticationHeaderValue> WwwAuthenticate { get { throw null; } }
    // }
    internal partial class MediaTypeHeaderValue : System.ICloneable
    {
        protected MediaTypeHeaderValue(Headers.MediaTypeHeaderValue source) { }
        public MediaTypeHeaderValue(string mediaType) { }
        public string CharSet { get { throw null; } set { } }
        
        public string MediaType { get { throw null; } set { } }
        public System.Collections.Generic.ICollection<Headers.NameValueHeaderValue> Parameters { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.MediaTypeHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.MediaTypeHeaderValue? parsedValue) { throw null; }
    }
    public sealed partial class MediaTypeWithQualityHeaderValue : Headers.MediaTypeHeaderValue, System.ICloneable
    {
        public MediaTypeWithQualityHeaderValue(string mediaType) : base(default(Headers.MediaTypeHeaderValue)) { }
        public MediaTypeWithQualityHeaderValue(string mediaType, double quality) : base(default(Headers.MediaTypeHeaderValue)) { }
        public double? Quality { get { throw null; } set { } }
        public static new Headers.MediaTypeWithQualityHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public static bool TryParse(string input, out Headers.MediaTypeWithQualityHeaderValue? parsedValue) { throw null; }
    }
    internal partial class NameValueHeaderValue : System.ICloneable
    {
        protected NameValueHeaderValue(Headers.NameValueHeaderValue source) { }
        public NameValueHeaderValue(string name) { }
        public NameValueHeaderValue(string name, string value) { }
        public string Name { get { throw null; } }
        public string Value { get { throw null; } set { } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.NameValueHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.NameValueHeaderValue? parsedValue) { throw null; }
    }
    internal partial class NameValueWithParametersHeaderValue : Headers.NameValueHeaderValue, System.ICloneable
    {
        protected NameValueWithParametersHeaderValue(Headers.NameValueWithParametersHeaderValue source) : base(default(string)) { }
        public NameValueWithParametersHeaderValue(string name) : base(default(string)) { }
        public NameValueWithParametersHeaderValue(string name, string value) : base(default(string)) { }
        public System.Collections.Generic.ICollection<Headers.NameValueHeaderValue> Parameters { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static new Headers.NameValueWithParametersHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.NameValueWithParametersHeaderValue? parsedValue) { throw null; }
    }
    internal partial class ProductHeaderValue : System.ICloneable
    {
        public ProductHeaderValue(string name) { }
        public ProductHeaderValue(string name, string version) { }
        public string Name { get { throw null; } }
        public string Version { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.ProductHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.ProductHeaderValue? parsedValue) { throw null; }
    }
    internal partial class ProductInfoHeaderValue : System.ICloneable
    {
        public ProductInfoHeaderValue(Headers.ProductHeaderValue product) { }
        public ProductInfoHeaderValue(string comment) { }
        public ProductInfoHeaderValue(string productName, string productVersion) { }
        public string Comment { get { throw null; } }
        public Headers.ProductHeaderValue? Product { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.ProductInfoHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.ProductInfoHeaderValue? parsedValue) { throw null; }
    }
    internal partial class RangeConditionHeaderValue : System.ICloneable
    {
        public RangeConditionHeaderValue(System.DateTimeOffset date) { }
        public RangeConditionHeaderValue(Headers.EntityTagHeaderValue entityTag) { }
        public RangeConditionHeaderValue(string entityTag) { }
        public System.DateTimeOffset? Date { get { throw null; } }
        public Headers.EntityTagHeaderValue? EntityTag { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.RangeConditionHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.RangeConditionHeaderValue? parsedValue) { throw null; }
    }
    internal partial class RangeHeaderValue : System.ICloneable
    {
        public RangeHeaderValue() { }
        public RangeHeaderValue(long? from, long? to) { }
        public System.Collections.Generic.ICollection<Headers.RangeItemHeaderValue> Ranges { get { throw null; } }
        public string Unit { get { throw null; } set { } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.RangeHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.RangeHeaderValue? parsedValue) { throw null; }
    }
    internal partial class RangeItemHeaderValue : System.ICloneable
    {
        public RangeItemHeaderValue(long? from, long? to) { }
        public long? From { get { throw null; } }
        public long? To { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
    }
    internal partial class RetryConditionHeaderValue : System.ICloneable
    {
        public RetryConditionHeaderValue(System.DateTimeOffset date) { }
        public RetryConditionHeaderValue(System.TimeSpan delta) { }
        public System.DateTimeOffset? Date { get { throw null; } }
        public System.TimeSpan? Delta { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.RetryConditionHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.RetryConditionHeaderValue? parsedValue) { throw null; }
    }
    internal partial class StringWithQualityHeaderValue : System.ICloneable
    {
        public StringWithQualityHeaderValue(string value) { }
        public StringWithQualityHeaderValue(string value, double quality) { }
        public double? Quality { get { throw null; } }
        public string Value { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.StringWithQualityHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.StringWithQualityHeaderValue? parsedValue) { throw null; }
    }
    internal partial class TransferCodingHeaderValue : System.ICloneable
    {
        protected TransferCodingHeaderValue(Headers.TransferCodingHeaderValue source) { }
        public TransferCodingHeaderValue(string value) { }
        public System.Collections.Generic.ICollection<Headers.NameValueHeaderValue> Parameters { get { throw null; } }
        public string Value { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.TransferCodingHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.TransferCodingHeaderValue? parsedValue) { throw null; }
    }
    public sealed partial class TransferCodingWithQualityHeaderValue : Headers.TransferCodingHeaderValue, System.ICloneable
    {
        public TransferCodingWithQualityHeaderValue(string value) : base(default(Headers.TransferCodingHeaderValue)) { }
        public TransferCodingWithQualityHeaderValue(string value, double quality) : base(default(Headers.TransferCodingHeaderValue)) { }
        public double? Quality { get { throw null; } set { } }
        public static new Headers.TransferCodingWithQualityHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public static bool TryParse(string input, out Headers.TransferCodingWithQualityHeaderValue? parsedValue) { throw null; }
    }
    internal partial class ViaHeaderValue : System.ICloneable
    {
        public ViaHeaderValue(string protocolVersion, string receivedBy) { }
        public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName) { }
        public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName, string comment) { }
        public string Comment { get { throw null; } }
        public string ProtocolName { get { throw null; } }
        public string ProtocolVersion { get { throw null; } }
        public string ReceivedBy { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.ViaHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.ViaHeaderValue? parsedValue) { throw null; }
    }
    internal partial class WarningHeaderValue : System.ICloneable
    {
        public WarningHeaderValue(int code, string agent, string text) { }
        public WarningHeaderValue(int code, string agent, string text, System.DateTimeOffset date) { }
        public string Agent { get { throw null; } }
        public int Code { get { throw null; } }
        public System.DateTimeOffset? Date { get { throw null; } }
        public string Text { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static Headers.WarningHeaderValue Parse(string input) { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public override string ToString() { throw null; }
        public static bool TryParse(string input, out Headers.WarningHeaderValue? parsedValue) { throw null; }
    }
}
